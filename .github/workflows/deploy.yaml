name: Deploy to AWS Elastic Beanstalk

on:
  workflow_dispatch:
    inputs:
      aws-env:
        description: "AWS Elastic Beanstalk environment"
        required: true
        default: "gh-actions-staging"
        type: string
      github-env:
        description: "GitHub environment"
        required: true
        default: "staging"
        type: string
      report-pr:
        description: "PR number to report deployment status"
        required: false
        type: number
  workflow_call:
    inputs:
      aws-env:
        description: "AWS Elastic Beanstalk environment"
        required: true
        default: "gh-actions-staging"
        type: string
      github-env:
        description: "GitHub environment"
        required: true
        default: "staging"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.aws-env }}-${{ inputs.github-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
    environment:
      name: ${{ github.event.inputs.github-env }}
      url: "http://${{ steps.get-eb-env-cname.outputs.aws_env_cname }}"
    steps:
      - name: Prevent deployment to Production from different environments
        if: ${{  github.event.inputs.aws-env == vars.AWS_EB_PRODUCTION_ENV && github.event.inputs.github-env != 'production' }}
        run: |
          echo "::error::Cannot deploy to Production from a non production environment"
          exit 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Id Token
        if: always()
        id: get-id-token
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const token = await core.getIDToken();
            return token;

      - name: Save token in txt file
        if: always()
        run: echo ${{ steps.get-id-token.outputs.result }} > token.txt

      - name: Save token artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: token
          path: token.txt

      - name: Update Pull Request (Start)
        uses: actions/github-script@v7
        if: inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### ⏳ Deployment in progress...

            [You can monitor the progress here.](https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        env:
          FLAGSMITH_SERVER_KEY: ${{ secrets.FLAGSMITH_SERVER_KEY }}
        run: npm run build

      - name: Remove Husky
        run: npm pkg delete scripts.prepare

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip

      - name: Install Elastic Beanstalk CLI
        id: install-eb-cli
        run: pip install awsebcli

      - name: Get AWS Elastic Beanstalk environment name
        id: get-eb-env-name
        run: echo "aws_env=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].EnvironmentName" --output text)" >> $GITHUB_OUTPUT

      - name: Get AWS Elastic Beanstalk environment status
        id: get-eb-env-status
        run: echo "aws_env_status=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].Status" --output text)" >> $GITHUB_OUTPUT

      - name: Initialize AWS Elastic Beanstalk
        run: eb init ${{ vars.AWS_EB_APP_NAME }} --platform "${{ vars.AWS_EB_PLATFORM }}" --region ${{ vars.AWS_REGION }}

      - name: Create AWS Elastic Beanstalk environment
        if: steps.get-eb-env-name.outputs.aws_env == 'None' || steps.get-eb-env-status.outputs.aws_env_status == 'Terminated'
        run: eb create ${{ github.event.inputs.aws-env }} --instance-types ${{ vars.AWS_EB_ENV_INSTANCE_TYPES }} --cname ${{ github.event.inputs.aws-env }} --envvars FLAGSMITH_SERVER_KEY=${{ secrets.FLAGSMITH_SERVER_KEY }}

      - name: Deploy to AWS Elastic Beanstalk existing environment
        if: steps.get-eb-env-name.outputs.aws_env == github.event.inputs.aws-env && steps.get-eb-env-status.outputs.aws_env_status != 'Terminated'
        run: eb deploy ${{ steps.get-eb-env-name.outputs.aws_env }}

      - name: Get AWS Elastic Beanstalk environment cname
        id: get-eb-env-cname
        run: echo "aws_env_cname=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].CNAME" --output text)" >> $GITHUB_OUTPUT

      - name: Notify on Slack
        uses: slackapi/slack-github-action@v1
        continue-on-error: true
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 Deployment to AWS environment *${{ inputs.aws-env }}* using *${{ inputs.github-env }}* GitHub environment  was successfull. <http://${{ steps.get-eb-env-cname.outputs.aws_env_cname }}|View Deployment>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Update Pull Request (Success)
        uses: actions/github-script@v7
        if: success() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🚀 Deployment Completed.

            You can view the deployed environment here: http://${{ steps.get-eb-env-cname.outputs.aws_env_cname }}`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })

      - name: Update Pull Request (Failure)
        uses: actions/github-script@v7
        if: failure() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🛑 Deployment Failed.

            [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })

      - name: Abort deployment if Cancelled
        if: ${{ cancelled() && steps.install-eb-cli.conclusion == 'success' }}
        run: |
          eb abort ${{ github.event.inputs.aws-env }}
          echo "::error::Deployment was cancelled"
          exit 1
